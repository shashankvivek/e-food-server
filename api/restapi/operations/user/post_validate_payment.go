// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PostValidatePaymentHandlerFunc turns a function with the right signature into a post validate payment handler
type PostValidatePaymentHandlerFunc func(PostValidatePaymentParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PostValidatePaymentHandlerFunc) Handle(params PostValidatePaymentParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PostValidatePaymentHandler interface for that can handle valid post validate payment params
type PostValidatePaymentHandler interface {
	Handle(PostValidatePaymentParams, interface{}) middleware.Responder
}

// NewPostValidatePayment creates a new http.Handler for the post validate payment operation
func NewPostValidatePayment(ctx *middleware.Context, handler PostValidatePaymentHandler) *PostValidatePayment {
	return &PostValidatePayment{Context: ctx, Handler: handler}
}

/*PostValidatePayment swagger:route POST /validatePayment user postValidatePayment

api to validate the payment

*/
type PostValidatePayment struct {
	Context *middleware.Context
	Handler PostValidatePaymentHandler
}

func (o *PostValidatePayment) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostValidatePaymentParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostValidatePaymentBody post validate payment body
//
// swagger:model PostValidatePaymentBody
type PostValidatePaymentBody struct {

	// razorpay order id
	RazorpayOrderID string `json:"razorpay_order_id,omitempty"`

	// razorpay payment id
	RazorpayPaymentID string `json:"razorpay_payment_id,omitempty"`

	// razorpay signature
	RazorpaySignature string `json:"razorpay_signature,omitempty"`
}

// Validate validates this post validate payment body
func (o *PostValidatePaymentBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostValidatePaymentBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostValidatePaymentBody) UnmarshalBinary(b []byte) error {
	var res PostValidatePaymentBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
