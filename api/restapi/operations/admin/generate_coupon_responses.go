// Code generated by go-swagger; DO NOT EDIT.

package admin

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"e-food/api/models"
)

// GenerateCouponOKCode is the HTTP code returned for type GenerateCouponOK
const GenerateCouponOKCode int = 200

/*GenerateCouponOK valid coupon code

swagger:response generateCouponOK
*/
type GenerateCouponOK struct {

	/*
	  In: Body
	*/
	Payload *models.SuccessResponse `json:"body,omitempty"`
}

// NewGenerateCouponOK creates GenerateCouponOK with default headers values
func NewGenerateCouponOK() *GenerateCouponOK {

	return &GenerateCouponOK{}
}

// WithPayload adds the payload to the generate coupon o k response
func (o *GenerateCouponOK) WithPayload(payload *models.SuccessResponse) *GenerateCouponOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the generate coupon o k response
func (o *GenerateCouponOK) SetPayload(payload *models.SuccessResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GenerateCouponOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GenerateCouponBadRequestCode is the HTTP code returned for type GenerateCouponBadRequest
const GenerateCouponBadRequestCode int = 400

/*GenerateCouponBadRequest Bad Request

swagger:response generateCouponBadRequest
*/
type GenerateCouponBadRequest struct {
}

// NewGenerateCouponBadRequest creates GenerateCouponBadRequest with default headers values
func NewGenerateCouponBadRequest() *GenerateCouponBadRequest {

	return &GenerateCouponBadRequest{}
}

// WriteResponse to the client
func (o *GenerateCouponBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(400)
}

// GenerateCouponNotFoundCode is the HTTP code returned for type GenerateCouponNotFound
const GenerateCouponNotFoundCode int = 404

/*GenerateCouponNotFound request Not Found

swagger:response generateCouponNotFound
*/
type GenerateCouponNotFound struct {
}

// NewGenerateCouponNotFound creates GenerateCouponNotFound with default headers values
func NewGenerateCouponNotFound() *GenerateCouponNotFound {

	return &GenerateCouponNotFound{}
}

// WriteResponse to the client
func (o *GenerateCouponNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

// GenerateCouponInternalServerErrorCode is the HTTP code returned for type GenerateCouponInternalServerError
const GenerateCouponInternalServerErrorCode int = 500

/*GenerateCouponInternalServerError Server error

swagger:response generateCouponInternalServerError
*/
type GenerateCouponInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGenerateCouponInternalServerError creates GenerateCouponInternalServerError with default headers values
func NewGenerateCouponInternalServerError() *GenerateCouponInternalServerError {

	return &GenerateCouponInternalServerError{}
}

// WithPayload adds the payload to the generate coupon internal server error response
func (o *GenerateCouponInternalServerError) WithPayload(payload string) *GenerateCouponInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the generate coupon internal server error response
func (o *GenerateCouponInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GenerateCouponInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
