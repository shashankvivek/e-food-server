// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CouponConfig coupon config
//
// swagger:model CouponConfig
type CouponConfig struct {

	// In UTC time
	// Format: date-time
	ExpirationDate strfmt.DateTime `json:"expirationDate,omitempty"`

	// This has to be provided by another rule-engine system with structural validations
	RuleSet string `json:"ruleSet,omitempty"`

	// user limit
	UserLimit int64 `json:"userLimit,omitempty"`
}

func (m *CouponConfig) UnmarshalJSON(b []byte) error {
	type CouponConfigAlias CouponConfig
	var t CouponConfigAlias
	if err := json.Unmarshal([]byte("{\"userLimit\":1}"), &t); err != nil {
		return err
	}
	if err := json.Unmarshal(b, &t); err != nil {
		return err
	}
	*m = CouponConfig(t)
	return nil
}

// Validate validates this coupon config
func (m *CouponConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpirationDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CouponConfig) validateExpirationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpirationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("expirationDate", "body", "date-time", m.ExpirationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CouponConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CouponConfig) UnmarshalBinary(b []byte) error {
	var res CouponConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
