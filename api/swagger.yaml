swagger: '2.0'
info:
  version: '1.0.0'
  title: E-Food
schemes: [http]
host: e-food.com
basePath: /
consumes: [application/json]
produces: [application/json]
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
paths:
  /categories:
    get:
      tags: [menu]
      operationId: CategoryList
      responses:
        200:
          description: 'Get Category to show menu'
          schema:
            $ref: '#/definitions/Categories'
        400:
          description: Bad Request
        404:
          description: Categories Not Found
        500:
          schema:
            type: string
          description: Server Error
  /productListBySubCategory/{id}:
    get:
      tags: [products]
      operationId: GetFromSubCategory
      parameters:
        - name: "id"
          in : "path"
          type: integer
          format: int64
          required: true
          description: Subcategory Id
      responses:
        200:
          description: 'Get Products based on sub category'
          schema:
            $ref: '#/definitions/Products'
        400:
          description : Bad Request
        404:
          description: Products not found
        500:
          schema:
            type: string
          description: Server error
  /login:
    post:
      description: 'Returns token for authorized User'
      tags: [user]
      operationId: Login
      consumes:
        - "application/json"
      parameters:
        - name: 'login'
          in: 'body'
          required: true
          description: 'Login Payload'
          schema:
            $ref: '#/definitions/LoginInfo'
      responses:
        200:
          description: Successful login
          schema:
            $ref: '#/definitions/LoginSuccess'
        400:
          description: Bad Request
        404:
          schema:
            type: string
          description: User not found
        500:
          schema:
            type: string
          description: Server error
  /register:
    post:
      description: 'To register a new user'
      tags: [user]
      operationId: Register
      consumes:
        - 'application/json'
      parameters:
        - name: 'signup'
          in: 'body'
          required: true
          description: 'Registeration Payload'
          schema:
            $ref: '#/definitions/RegisterUser'
      responses:
        200:
          description: Successful registeration
          schema:
            $ref: '#/definitions/SuccessResponse'
        400:
          description: Bad Request
        404:
          schema:
            type: string
          description: User not found
        500:
          schema:
            type: string
          description: Server error
  /checkoutCart:
    get:
      description: 'Get Checkout Cart with offers'
      tags: [user]
      operationId: checkout
      security:
        - Bearer: []
      responses:
        200:
          description: "Success response when item is added successfully"
          schema:
            $ref: "#/definitions/CartSuccessResponse"
        400:
          description: Bad Request
        404:
          description: Item to be added Not Found
        500:
          schema:
            type: string
          description: Server error
  /user/cart:
    post:
      description: 'This API adds product to cart / guest cart'
      tags: [user]
      operationId: AddToCart
      security:
        - Bearer: []
      consumes:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/ItemInfo"
      responses:
        200:
          description: "Success response when item is added successfully"
          schema:
            $ref: "#/definitions/CartSuccessResponse"
        400:
          description: Bad Request
        404:
          description: Item to be added Not Found
        500:
          schema:
            type: string
          description: Server error
    get:
      description: 'Get All cart items'
      tags: [user]
      operationId: GetCart
      security:
        - Bearer: []
      responses:
        200:
          description: "All items in cart"
          schema:
            $ref: '#/definitions/CartPreview'
        400:
          description: Bad Request
        404:
          description: Item Not Found
        500:
          schema:
            type: string
          description: Server error
    delete:
      description: 'Remove item from cart'
      tags: [user]
      operationId: RemoveFromCart
      security:
        - Bearer: []
      parameters:
        - in: 'query'
          name: 'productId'
          required: true
          type: integer
      responses:
        200:
          description: "Success response when item is removed from cart"
          schema:
            $ref: "#/definitions/SuccessResponse"
        400:
          description: Bad Request
        404:
          description: Item to be deleted Not Found
        500:
          schema:
            type: string
          description: Server error
  /guest/cart:
    post:
      description: 'This API adds product to cart / guest cart'
      tags: [guest]
      operationId: AddItem
      consumes:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/ItemInfo"
      responses:
        200:
          description: "Success response when item is added successfully"
          schema:
            $ref: "#/definitions/CartSuccessResponse"
        400:
          description: Bad Request
        404:
          description: Item to be added Not Found
        500:
          schema:
            type: string
          description: Server error
    get:
      description: 'Get All cart items'
      tags: [guest]
      operationId: GetItems
      responses:
        200:
          description: "All items in cart"
          schema:
            $ref: '#/definitions/CartPreview'
        400:
          description: Bad Request
        404:
          description: Item Not Found
        500:
          schema:
            type: string
          description: Server error
    delete:
      description: 'Remove item from cart'
      tags: [guest]
      operationId: RemoveItem
      parameters:
        - in : 'query'
          name: 'productId'
          required: true
          type: integer
      responses:
        200:
          description: "Success response when item is removed from cart"
          schema:
            $ref: "#/definitions/SuccessResponse"
        400:
          description: Bad Request
        404:
          description: Item to be deleted Not Found
        500:
          schema:
            type: string
          description: Server error
  /sessionInfo:
    post:
      description: 'Adds Cookie ID for guests'
      tags: [guest]
      operationId: AddSession
      consumes:
        - 'application/json'
      parameters:
        - in: 'body'
          name: 'session_info'
          schema:
            $ref: '#/definitions/GuestSession'
      responses:
        200:
          description: "Success response when item is added successfully"
          schema:
            $ref: "#/definitions/SuccessResponse"
        400:
          description: Bad Request
        404:
          description: Session ID Not Found
        500:
          schema:
            type: string
          description: Server error
definitions:
  RegisterUser:
    type: object
    properties:
      email:
        type: string
      fname:
        type: string
      lname:
        type: string
      password:
        type: string
      phoneNo:
        type: integer
  LoginInfo:
    type: object
    properties:
      email:
        type: string
      password:
        type: string
  LoginSuccess:
    type: object
    properties:
      success:
        type: boolean
      token:
        type: string
  SuccessResponse:
    type: object
    properties:
      success:
        type: boolean
      message:
        type: string
  CartSuccessResponse:
    type: object
    properties:
      success:
        type: boolean
      message:
        type: string
      qtyAdded:
        type: integer
  Categories:
    type: array
    items:
      $ref: '#/definitions/Category'
  Category:
    type: object
    properties:
      bcId:
        type: integer
      bcName:
        type: string
      bcImageUrl:
        type: string
      bcIsActive:
        type: boolean
      subCategories:
        type: array
        items:
          $ref: '#/definitions/SubCategory'
  SubCategory:
    type: object
    properties:
      scId:
        type: integer
      scName:
        type: string
      scImageUrl:
        type: string
      scIsActive:
        type: boolean
  Products:
    type: array
    items:
      $ref: '#/definitions/Product'
  Product:
    type: object
    properties:
      productId:
        type: integer
      name:
        type: string
      sku:
        type: string
      description:
        type: string
      bcId:
        type: integer
        description: Broad Category Id
      currency:
        type: string
      imageUrl:
        type: string
      discountPercentage:
        type: number
        example: "1.00"
        description: Discount to be applied on Unit Price
      unitPrice:
        type: number
      scId:
        type: integer
        description: Sub Category Id
      isAvailable:
        type: boolean
        description: False if Product is out of stock
  ItemInfo:
    type: object
    properties:
      totalQty:
        type: integer
      productId:
        type: integer
  CartPreview:
    type: array
    items:
      $ref: '#/definitions/CartItem'
  CartItem:
    type: object
    properties:
      productId:
        type: integer
      productName:
        type: string
      quantity:
        type: integer
      unitPrice:
        type: number
      imageUrl:
        type: string
      currency:
        type: string
  GuestSession:
    type: object
    properties:
      extraInfo:
        type: string



