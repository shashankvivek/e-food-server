// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Categories categories
//
// swagger:model Categories
type Categories []*CategoriesItems0

// Validate validates this categories
func (m Categories) Validate(formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {
		if swag.IsZero(m[i]) { // not required
			continue
		}

		if m[i] != nil {
			if err := m[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// CategoriesItems0 categories items0
//
// swagger:model CategoriesItems0
type CategoriesItems0 struct {

	// broad category Id
	BroadCategoryID string `json:"BroadCategoryId,omitempty"`

	// image Url
	ImageURL string `json:"ImageUrl,omitempty"`

	// is active
	IsActive bool `json:"IsActive,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// sub categories
	SubCategories []*CategoriesItems0SubCategoriesItems0 `json:"SubCategories"`
}

// Validate validates this categories items0
func (m *CategoriesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSubCategories(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CategoriesItems0) validateSubCategories(formats strfmt.Registry) error {

	if swag.IsZero(m.SubCategories) { // not required
		return nil
	}

	for i := 0; i < len(m.SubCategories); i++ {
		if swag.IsZero(m.SubCategories[i]) { // not required
			continue
		}

		if m.SubCategories[i] != nil {
			if err := m.SubCategories[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("SubCategories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CategoriesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CategoriesItems0) UnmarshalBinary(b []byte) error {
	var res CategoriesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// CategoriesItems0SubCategoriesItems0 categories items0 sub categories items0
//
// swagger:model CategoriesItems0SubCategoriesItems0
type CategoriesItems0SubCategoriesItems0 struct {

	// image Url
	ImageURL string `json:"ImageUrl,omitempty"`

	// is active
	IsActive bool `json:"IsActive,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// sub category Id
	SubCategoryID string `json:"SubCategoryId,omitempty"`
}

// Validate validates this categories items0 sub categories items0
func (m *CategoriesItems0SubCategoriesItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CategoriesItems0SubCategoriesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CategoriesItems0SubCategoriesItems0) UnmarshalBinary(b []byte) error {
	var res CategoriesItems0SubCategoriesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
