// Code generated by go-swagger; DO NOT EDIT.

package cart

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ItemCountHandlerFunc turns a function with the right signature into a item count handler
type ItemCountHandlerFunc func(ItemCountParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ItemCountHandlerFunc) Handle(params ItemCountParams) middleware.Responder {
	return fn(params)
}

// ItemCountHandler interface for that can handle valid item count params
type ItemCountHandler interface {
	Handle(ItemCountParams) middleware.Responder
}

// NewItemCount creates a new http.Handler for the item count operation
func NewItemCount(ctx *middleware.Context, handler ItemCountHandler) *ItemCount {
	return &ItemCount{Context: ctx, Handler: handler}
}

/*ItemCount swagger:route GET /cartItemCount cart itemCount

This returns count of cart items

*/
type ItemCount struct {
	Context *middleware.Context
	Handler ItemCountHandler
}

func (o *ItemCount) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewItemCountParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
