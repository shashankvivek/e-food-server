// Code generated by go-swagger; DO NOT EDIT.

package cart

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RemoveItemHandlerFunc turns a function with the right signature into a remove item handler
type RemoveItemHandlerFunc func(RemoveItemParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RemoveItemHandlerFunc) Handle(params RemoveItemParams) middleware.Responder {
	return fn(params)
}

// RemoveItemHandler interface for that can handle valid remove item params
type RemoveItemHandler interface {
	Handle(RemoveItemParams) middleware.Responder
}

// NewRemoveItem creates a new http.Handler for the remove item operation
func NewRemoveItem(ctx *middleware.Context, handler RemoveItemHandler) *RemoveItem {
	return &RemoveItem{Context: ctx, Handler: handler}
}

/*RemoveItem swagger:route DELETE /cart cart removeItem

Remove item from cart

*/
type RemoveItem struct {
	Context *middleware.Context
	Handler RemoveItemHandler
}

func (o *RemoveItem) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRemoveItemParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
