// Code generated by go-swagger; DO NOT EDIT.

package cart

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"e-food/models"
)

// CheckoutOKCode is the HTTP code returned for type CheckoutOK
const CheckoutOKCode int = 200

/*CheckoutOK Success response when item is added successfully

swagger:response checkoutOK
*/
type CheckoutOK struct {

	/*
	  In: Body
	*/
	Payload *models.CartSuccessResponse `json:"body,omitempty"`
}

// NewCheckoutOK creates CheckoutOK with default headers values
func NewCheckoutOK() *CheckoutOK {

	return &CheckoutOK{}
}

// WithPayload adds the payload to the checkout o k response
func (o *CheckoutOK) WithPayload(payload *models.CartSuccessResponse) *CheckoutOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the checkout o k response
func (o *CheckoutOK) SetPayload(payload *models.CartSuccessResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckoutOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CheckoutBadRequestCode is the HTTP code returned for type CheckoutBadRequest
const CheckoutBadRequestCode int = 400

/*CheckoutBadRequest Bad Request

swagger:response checkoutBadRequest
*/
type CheckoutBadRequest struct {
}

// NewCheckoutBadRequest creates CheckoutBadRequest with default headers values
func NewCheckoutBadRequest() *CheckoutBadRequest {

	return &CheckoutBadRequest{}
}

// WriteResponse to the client
func (o *CheckoutBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(400)
}

// CheckoutNotFoundCode is the HTTP code returned for type CheckoutNotFound
const CheckoutNotFoundCode int = 404

/*CheckoutNotFound Item to be added Not Found

swagger:response checkoutNotFound
*/
type CheckoutNotFound struct {
}

// NewCheckoutNotFound creates CheckoutNotFound with default headers values
func NewCheckoutNotFound() *CheckoutNotFound {

	return &CheckoutNotFound{}
}

// WriteResponse to the client
func (o *CheckoutNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

// CheckoutInternalServerErrorCode is the HTTP code returned for type CheckoutInternalServerError
const CheckoutInternalServerErrorCode int = 500

/*CheckoutInternalServerError Server error

swagger:response checkoutInternalServerError
*/
type CheckoutInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewCheckoutInternalServerError creates CheckoutInternalServerError with default headers values
func NewCheckoutInternalServerError() *CheckoutInternalServerError {

	return &CheckoutInternalServerError{}
}

// WithPayload adds the payload to the checkout internal server error response
func (o *CheckoutInternalServerError) WithPayload(payload string) *CheckoutInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the checkout internal server error response
func (o *CheckoutInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CheckoutInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
