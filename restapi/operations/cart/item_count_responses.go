// Code generated by go-swagger; DO NOT EDIT.

package cart

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"e-food/models"
)

// ItemCountOKCode is the HTTP code returned for type ItemCountOK
const ItemCountOKCode int = 200

/*ItemCountOK Gives count

swagger:response itemCountOK
*/
type ItemCountOK struct {

	/*
	  In: Body
	*/
	Payload *models.CartItemCount `json:"body,omitempty"`
}

// NewItemCountOK creates ItemCountOK with default headers values
func NewItemCountOK() *ItemCountOK {

	return &ItemCountOK{}
}

// WithPayload adds the payload to the item count o k response
func (o *ItemCountOK) WithPayload(payload *models.CartItemCount) *ItemCountOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the item count o k response
func (o *ItemCountOK) SetPayload(payload *models.CartItemCount) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ItemCountOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ItemCountBadRequestCode is the HTTP code returned for type ItemCountBadRequest
const ItemCountBadRequestCode int = 400

/*ItemCountBadRequest Bad Request

swagger:response itemCountBadRequest
*/
type ItemCountBadRequest struct {
}

// NewItemCountBadRequest creates ItemCountBadRequest with default headers values
func NewItemCountBadRequest() *ItemCountBadRequest {

	return &ItemCountBadRequest{}
}

// WriteResponse to the client
func (o *ItemCountBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(400)
}

// ItemCountNotFoundCode is the HTTP code returned for type ItemCountNotFound
const ItemCountNotFoundCode int = 404

/*ItemCountNotFound Item to be added Not Found

swagger:response itemCountNotFound
*/
type ItemCountNotFound struct {
}

// NewItemCountNotFound creates ItemCountNotFound with default headers values
func NewItemCountNotFound() *ItemCountNotFound {

	return &ItemCountNotFound{}
}

// WriteResponse to the client
func (o *ItemCountNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

// ItemCountInternalServerErrorCode is the HTTP code returned for type ItemCountInternalServerError
const ItemCountInternalServerErrorCode int = 500

/*ItemCountInternalServerError Server error

swagger:response itemCountInternalServerError
*/
type ItemCountInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewItemCountInternalServerError creates ItemCountInternalServerError with default headers values
func NewItemCountInternalServerError() *ItemCountInternalServerError {

	return &ItemCountInternalServerError{}
}

// WithPayload adds the payload to the item count internal server error response
func (o *ItemCountInternalServerError) WithPayload(payload string) *ItemCountInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the item count internal server error response
func (o *ItemCountInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ItemCountInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
