// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetFromSubCategoryHandlerFunc turns a function with the right signature into a get from sub category handler
type GetFromSubCategoryHandlerFunc func(GetFromSubCategoryParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetFromSubCategoryHandlerFunc) Handle(params GetFromSubCategoryParams) middleware.Responder {
	return fn(params)
}

// GetFromSubCategoryHandler interface for that can handle valid get from sub category params
type GetFromSubCategoryHandler interface {
	Handle(GetFromSubCategoryParams) middleware.Responder
}

// NewGetFromSubCategory creates a new http.Handler for the get from sub category operation
func NewGetFromSubCategory(ctx *middleware.Context, handler GetFromSubCategoryHandler) *GetFromSubCategory {
	return &GetFromSubCategory{Context: ctx, Handler: handler}
}

/*GetFromSubCategory swagger:route GET /productListBySubCategory/{id} products getFromSubCategory

GetFromSubCategory get from sub category API

*/
type GetFromSubCategory struct {
	Context *middleware.Context
	Handler GetFromSubCategoryHandler
}

func (o *GetFromSubCategory) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetFromSubCategoryParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
