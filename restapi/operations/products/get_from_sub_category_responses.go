// Code generated by go-swagger; DO NOT EDIT.

package products

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "e-food/models"
)

// GetFromSubCategoryOKCode is the HTTP code returned for type GetFromSubCategoryOK
const GetFromSubCategoryOKCode int = 200

/*GetFromSubCategoryOK Get Products based on sub category

swagger:response getFromSubCategoryOK
*/
type GetFromSubCategoryOK struct {

	/*
	  In: Body
	*/
	Payload models.Products `json:"body,omitempty"`
}

// NewGetFromSubCategoryOK creates GetFromSubCategoryOK with default headers values
func NewGetFromSubCategoryOK() *GetFromSubCategoryOK {

	return &GetFromSubCategoryOK{}
}

// WithPayload adds the payload to the get from sub category o k response
func (o *GetFromSubCategoryOK) WithPayload(payload models.Products) *GetFromSubCategoryOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get from sub category o k response
func (o *GetFromSubCategoryOK) SetPayload(payload models.Products) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetFromSubCategoryOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = models.Products{}
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetFromSubCategoryBadRequestCode is the HTTP code returned for type GetFromSubCategoryBadRequest
const GetFromSubCategoryBadRequestCode int = 400

/*GetFromSubCategoryBadRequest Bad Request

swagger:response getFromSubCategoryBadRequest
*/
type GetFromSubCategoryBadRequest struct {
}

// NewGetFromSubCategoryBadRequest creates GetFromSubCategoryBadRequest with default headers values
func NewGetFromSubCategoryBadRequest() *GetFromSubCategoryBadRequest {

	return &GetFromSubCategoryBadRequest{}
}

// WriteResponse to the client
func (o *GetFromSubCategoryBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(400)
}

// GetFromSubCategoryNotFoundCode is the HTTP code returned for type GetFromSubCategoryNotFound
const GetFromSubCategoryNotFoundCode int = 404

/*GetFromSubCategoryNotFound Products not found

swagger:response getFromSubCategoryNotFound
*/
type GetFromSubCategoryNotFound struct {
}

// NewGetFromSubCategoryNotFound creates GetFromSubCategoryNotFound with default headers values
func NewGetFromSubCategoryNotFound() *GetFromSubCategoryNotFound {

	return &GetFromSubCategoryNotFound{}
}

// WriteResponse to the client
func (o *GetFromSubCategoryNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

// GetFromSubCategoryInternalServerErrorCode is the HTTP code returned for type GetFromSubCategoryInternalServerError
const GetFromSubCategoryInternalServerErrorCode int = 500

/*GetFromSubCategoryInternalServerError Server error

swagger:response getFromSubCategoryInternalServerError
*/
type GetFromSubCategoryInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewGetFromSubCategoryInternalServerError creates GetFromSubCategoryInternalServerError with default headers values
func NewGetFromSubCategoryInternalServerError() *GetFromSubCategoryInternalServerError {

	return &GetFromSubCategoryInternalServerError{}
}

// WithPayload adds the payload to the get from sub category internal server error response
func (o *GetFromSubCategoryInternalServerError) WithPayload(payload string) *GetFromSubCategoryInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get from sub category internal server error response
func (o *GetFromSubCategoryInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetFromSubCategoryInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
