// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"e-food/models"
)

// RemoveFromCartOKCode is the HTTP code returned for type RemoveFromCartOK
const RemoveFromCartOKCode int = 200

/*RemoveFromCartOK Success response when item is removed from cart

swagger:response removeFromCartOK
*/
type RemoveFromCartOK struct {

	/*
	  In: Body
	*/
	Payload *models.SuccessResponse `json:"body,omitempty"`
}

// NewRemoveFromCartOK creates RemoveFromCartOK with default headers values
func NewRemoveFromCartOK() *RemoveFromCartOK {

	return &RemoveFromCartOK{}
}

// WithPayload adds the payload to the remove from cart o k response
func (o *RemoveFromCartOK) WithPayload(payload *models.SuccessResponse) *RemoveFromCartOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the remove from cart o k response
func (o *RemoveFromCartOK) SetPayload(payload *models.SuccessResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RemoveFromCartOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RemoveFromCartBadRequestCode is the HTTP code returned for type RemoveFromCartBadRequest
const RemoveFromCartBadRequestCode int = 400

/*RemoveFromCartBadRequest Bad Request

swagger:response removeFromCartBadRequest
*/
type RemoveFromCartBadRequest struct {
}

// NewRemoveFromCartBadRequest creates RemoveFromCartBadRequest with default headers values
func NewRemoveFromCartBadRequest() *RemoveFromCartBadRequest {

	return &RemoveFromCartBadRequest{}
}

// WriteResponse to the client
func (o *RemoveFromCartBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(400)
}

// RemoveFromCartNotFoundCode is the HTTP code returned for type RemoveFromCartNotFound
const RemoveFromCartNotFoundCode int = 404

/*RemoveFromCartNotFound Item to be deleted Not Found

swagger:response removeFromCartNotFound
*/
type RemoveFromCartNotFound struct {
}

// NewRemoveFromCartNotFound creates RemoveFromCartNotFound with default headers values
func NewRemoveFromCartNotFound() *RemoveFromCartNotFound {

	return &RemoveFromCartNotFound{}
}

// WriteResponse to the client
func (o *RemoveFromCartNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

// RemoveFromCartInternalServerErrorCode is the HTTP code returned for type RemoveFromCartInternalServerError
const RemoveFromCartInternalServerErrorCode int = 500

/*RemoveFromCartInternalServerError Server error

swagger:response removeFromCartInternalServerError
*/
type RemoveFromCartInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewRemoveFromCartInternalServerError creates RemoveFromCartInternalServerError with default headers values
func NewRemoveFromCartInternalServerError() *RemoveFromCartInternalServerError {

	return &RemoveFromCartInternalServerError{}
}

// WithPayload adds the payload to the remove from cart internal server error response
func (o *RemoveFromCartInternalServerError) WithPayload(payload string) *RemoveFromCartInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the remove from cart internal server error response
func (o *RemoveFromCartInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RemoveFromCartInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
