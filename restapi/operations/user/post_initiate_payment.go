// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostInitiatePaymentHandlerFunc turns a function with the right signature into a post initiate payment handler
type PostInitiatePaymentHandlerFunc func(PostInitiatePaymentParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn PostInitiatePaymentHandlerFunc) Handle(params PostInitiatePaymentParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// PostInitiatePaymentHandler interface for that can handle valid post initiate payment params
type PostInitiatePaymentHandler interface {
	Handle(PostInitiatePaymentParams, interface{}) middleware.Responder
}

// NewPostInitiatePayment creates a new http.Handler for the post initiate payment operation
func NewPostInitiatePayment(ctx *middleware.Context, handler PostInitiatePaymentHandler) *PostInitiatePayment {
	return &PostInitiatePayment{Context: ctx, Handler: handler}
}

/*PostInitiatePayment swagger:route POST /initiatePayment user postInitiatePayment

To initiate payment

uses RazorPay

*/
type PostInitiatePayment struct {
	Context *middleware.Context
	Handler PostInitiatePaymentHandler
}

func (o *PostInitiatePayment) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostInitiatePaymentParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
